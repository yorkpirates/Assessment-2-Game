@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.mygdx.game.PirateGame",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_104370703 { 
   	label=mygdx
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1554244721 { 
   	label=game
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Building772905440[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Building</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   buildingName: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isFlag: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ BeginContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EndContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EnterTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ ExitTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ create(pos: Vector2, name: String)</TD></TR>
<TR><TD ALIGN="LEFT" >- destroy()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CannonBall772905440[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CannonBall</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   age: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   shooter: Ship [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   toggleLife: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ BeginContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EndContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EnterTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ ExitTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ fire(pos: Vector2, dir: Vector2, sender: Ship)</TD></TR>
<TR><TD ALIGN="LEFT" >+ kill()</TD></TR>
<TR><TD ALIGN="LEFT" >- removeOnCollision()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CannonBallCollege772905440[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CannonBallCollege</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   shooter: College [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   toggleLife: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ BeginContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EndContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EnterTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ ExitTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ fire(pos: Vector2, dir: Vector2, sender: College)</TD></TR>
<TR><TD ALIGN="LEFT" >+ kill()</TD></TR>
<TR><TD ALIGN="LEFT" >- removeOnCollision()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Component1341037606[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Component</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   parent: Entity [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   reqsMet: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   requirements: ArrayList&lt;ComponentType&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   type: ComponentType [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ awake()</TD></TR>
<TR><TD ALIGN="LEFT" >- checkRequirements()</TD></TR>
<TR><TD ALIGN="LEFT" >+ cleanUp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
<TR><TD ALIGN="LEFT" >+ start()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

DifficultyManager415630198[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DifficultyManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ SelectEasy()</TD></TR>
<TR><TD ALIGN="LEFT" >+ SelectHard()</TD></TR>
<TR><TD ALIGN="LEFT" >+ SelectNormal()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

EndScreen2089564036[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)EndScreen</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   playerStats: Label [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   wonText: Label [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># CreateActors()</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ show()</TD></TR>
<TR><TD ALIGN="LEFT" ># update()</TD></TR>
<TR><TD ALIGN="LEFT" >+ win()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Entity772905440[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Entity</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   components: ArrayList&lt;Component&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   entityName: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addComponent(component: Component)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addComponents(components: Component...)</TD></TR>
<TR><TD ALIGN="LEFT" >+ cleanUp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ getComponent(type: ComponentType): Component</TD></TR>
<TR><TD ALIGN="LEFT" >+ getComponent(type: Class&lt;T&gt;): T</TD></TR>
<TR><TD ALIGN="LEFT" >+ getComponents(type: Class&lt;T&gt;): ArrayList&lt;T&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ raiseEvents(events: ComponentEvent...)</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

EntityManager415630198[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)EntityManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Initialize()</TD></TR>
<TR><TD ALIGN="LEFT" >+ addComponent(c: Component)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addEntity(e: Entity)</TD></TR>
<TR><TD ALIGN="LEFT" >+ changeName(prev: String, new_: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ cleanUp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ getEntity(name: String): Entity</TD></TR>
<TR><TD ALIGN="LEFT" >+ raiseEvents(comps: ComponentEvent...)</TD></TR>
<TR><TD ALIGN="LEFT" >- tryInit()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GameManager415630198[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ CreateCollege(factionId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ CreateNPCShip(factionId: int): NPCShip</TD></TR>
<TR><TD ALIGN="LEFT" >+ CreatePlayer()</TD></TR>
<TR><TD ALIGN="LEFT" >+ CreateWeather(): Weather</TD></TR>
<TR><TD ALIGN="LEFT" >+ CreateWorldMap(mapId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ Initialize()</TD></TR>
<TR><TD ALIGN="LEFT" >+ SpawnGame(mapId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addNPCMyShip()</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCollege(factionId: int): College</TD></TR>
<TR><TD ALIGN="LEFT" >+ getFaction(factionId: int): Faction</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPath(loc: Vector2, dst: Vector2): QueueFIFO&lt;Vector2&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ shoot(p: Ship, dir: Vector2)</TD></TR>
<TR><TD ALIGN="LEFT" >+ shoot2(c: College, dir: Vector2)</TD></TR>
<TR><TD ALIGN="LEFT" >- tryInit()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GameScreen2089564036[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameScreen</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   accumulator: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   interval: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   power_up_name1: Label [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   power_up_name2: Label [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   power_up_time1: Label [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   power_up_time2: Label [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   r: Random [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   texture: Texture [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   warn1: Label [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   warn2: Label [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># CreateActors()</TD></TR>
<TR><TD ALIGN="LEFT" >+ dispose()</TD></TR>
<TR><TD ALIGN="LEFT" >- powerUp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(delta: float)</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- rewardPowerUp()</TD></TR>
<TR><TD ALIGN="LEFT" >- send_warn(type: int)</TD></TR>
<TR><TD ALIGN="LEFT" ># update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

MenuScreen2089564036[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)MenuScreen</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># CreateActors()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hide()</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ show()</TD></TR>
<TR><TD ALIGN="LEFT" >- showLoadMenu()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

NPCShip772905440[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)NPCShip</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   path: QueueFIFO&lt;Vector2&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >+   stateMachine: StateMachine&lt;NPCShip, EnemyState&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   timer: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ BeginContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EndContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EnterTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ ExitTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ ShipDeath()</TD></TR>
<TR><TD ALIGN="LEFT" >+ followTarget()</TD></TR>
<TR><TD ALIGN="LEFT" >+ goToTarget()</TD></TR>
<TR><TD ALIGN="LEFT" >+ stopMovement()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
<TR><TD ALIGN="LEFT" >+ wander()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Page2089564036[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Page</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   actors: ArrayList&lt;Actor&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   parent: PirateGame [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># CreateActors()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hide()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(delta: float)</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ show()</TD></TR>
<TR><TD ALIGN="LEFT" ># update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PhysicsManager415630198[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PhysicsManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Initialize()</TD></TR>
<TR><TD ALIGN="LEFT" >+ Initialize(drawDebug: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >+ cleanUp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ createBody(bDef: BodyDef, fDef: FixtureDef, userData: Object): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ createMapCollision(map: TileMap)</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteBody(index: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getBody(id: int): Body</TD></TR>
<TR><TD ALIGN="LEFT" >- tile_getCenter(rectangle: Rectangle): Vector2</TD></TR>
<TR><TD ALIGN="LEFT" >- tile_getShape(rectangle: Rectangle): Shape</TD></TR>
<TR><TD ALIGN="LEFT" >- tryInit()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Pirate1341037606[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Pirate</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   attackDmg: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   factionId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   health: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   isAlive: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isBiggerDamage: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isImmortality: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isShootEightDirections: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isUnlimitedAmmo: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   points: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   targets: QueueFIFO&lt;Ship&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addAmmo(newAmmo: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addPlunder(money: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addPoints(value: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addTarget(target: Ship)</TD></TR>
<TR><TD ALIGN="LEFT" >+ canAttack(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ kill()</TD></TR>
<TR><TD ALIGN="LEFT" >+ removeTarget()</TD></TR>
<TR><TD ALIGN="LEFT" >+ shoot(dir: Vector2)</TD></TR>
<TR><TD ALIGN="LEFT" >+ takeDamage(dmg: float)</TD></TR>
<TR><TD ALIGN="LEFT" >+ targetCount(): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PirateGame670316286[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PirateGame</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   end: EndScreen [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   game: GameScreen [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   menu: MenuScreen [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   powerup: PowerupScreen [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   quitConfirm: QuitConfirmationScreen [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   shop: ShopScreen [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   skin: Skin [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   stage: Stage [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ create()</TD></TR>
<TR><TD ALIGN="LEFT" >- createSkin()</TD></TR>
<TR><TD ALIGN="LEFT" >+ dispose()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Player772905440[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Player</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   reward_powerUp: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ cleanUp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateHealth()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PowerupScreen2089564036[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PowerupScreen</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># CreateActors()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hide()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(delta: float)</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ show()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Quest1621435617[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Quest</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   description: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   isCompleted: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   reward: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ checkCompleted(p: Player): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

QuestManager415630198[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)QuestManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Initialize()</TD></TR>
<TR><TD ALIGN="LEFT" >+ addQuest(q: Quest)</TD></TR>
<TR><TD ALIGN="LEFT" >+ anyQuests(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkCompleted()</TD></TR>
<TR><TD ALIGN="LEFT" >- createRandomQuests()</TD></TR>
<TR><TD ALIGN="LEFT" >+ currentQuest(): Quest</TD></TR>
<TR><TD ALIGN="LEFT" >- rndKillQuest(exclude: ArrayList&lt;Integer&gt;): int</TD></TR>
<TR><TD ALIGN="LEFT" >- rndLocateQuest()</TD></TR>
<TR><TD ALIGN="LEFT" >- rndQuest(exclude: ArrayList&lt;Integer&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >- tryInit()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

QuitConfirmationScreen2089564036[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)QuitConfirmationScreen</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   accumulator: float [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># CreateActors()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hide()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(delta: float)</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ show()</TD></TR>
<TR><TD ALIGN="LEFT" >- showSaveMenu()</TD></TR>
<TR><TD ALIGN="LEFT" ># update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Renderable1341037606[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Renderable</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   isVisible: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   sprite: Sprite [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ cleanUp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hide()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
<TR><TD ALIGN="LEFT" >+ show()</TD></TR>
<TR><TD ALIGN="LEFT" >+ toggleVisibility()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

RenderingManager415630198[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RenderingManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Initialize()</TD></TR>
<TR><TD ALIGN="LEFT" >+ addItem(item: Component, layer: RenderLayer)</TD></TR>
<TR><TD ALIGN="LEFT" >+ cleanUp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
<TR><TD ALIGN="LEFT" >- tryInit()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ResourceManager415630198[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ResourceManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Initialize()</TD></TR>
<TR><TD ALIGN="LEFT" >+ addFontGenerator(fontPath: String): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ addTexture(fPath: String): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ addTextureAtlas(fPath: String): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ addTileMap(fPath: String): int</TD></TR>
<TR><TD ALIGN="LEFT" >- checkAdd()</TD></TR>
<TR><TD ALIGN="LEFT" >+ cleanUp()</TD></TR>
<TR><TD ALIGN="LEFT" >+ createFont(font_generator_id: int, fontSize: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ createFont(fontName: String, fontSize: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getFont(font_id: int): BitmapFont</TD></TR>
<TR><TD ALIGN="LEFT" >+ getFont(fontName: String): BitmapFont</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(name: String): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSprite(atlas_id: int, name: String): Sprite</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTexture(fPath: String): Texture</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTexture(id: int): Texture</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTextureAtlas(fPath: String): TextureAtlas</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTextureAtlas(id: int): TextureAtlas</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTileMap(fPath: String): TiledMap</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTileMap(id: int): TiledMap</TD></TR>
<TR><TD ALIGN="LEFT" >+ loadAssets()</TD></TR>
<TR><TD ALIGN="LEFT" >- tryInit()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Ship772905440[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Ship</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   currentDir: Vector2 [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isFreeze: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ BeginContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EndContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EnterTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ ExitTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ ShipDeath()</TD></TR>
<TR><TD ALIGN="LEFT" >+ biggerDamage(state: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >- getShipDirection(dir: Vector2): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ plunder(money: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ shoot(dir: Vector2)</TD></TR>
<TR><TD ALIGN="LEFT" >+ shoot()</TD></TR>
<TR><TD ALIGN="LEFT" >+ shoot8Directions(state: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >+ tempImmortality(state: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >+ unlimitedAmmo(state: boolean)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ShopScreen2089564036[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ShopScreen</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   accumulator: float [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># CreateActors()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hide()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(delta: float)</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ show()</TD></TR>
<TR><TD ALIGN="LEFT" ># update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Weather772905440[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Weather</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   count: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   currentDir: Vector2 [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   rb: RigidBody [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ BeginContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EndContact(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ EnterTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ ExitTrigger(info: CollisionInfo)</TD></TR>
<TR><TD ALIGN="LEFT" >- getShipDirection(dir: Vector2): String</TD></TR>
<TR><TD ALIGN="LEFT" >- moveWeather(dir: Vector2)</TD></TR>
<TR><TD ALIGN="LEFT" >+ update()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_950437906 { 
   	label=utils
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Constants681539803[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Constants</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ INIT_CONSTANTS()</TD></TR>
<TR><TD ALIGN="LEFT" >+ UPDATE_VIEWPORT(x: int, y: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

QueueFIFO681539803[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)QueueFIFO&lt;T&gt;</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   data: ArrayList&lt;T&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   topIndex: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ add(t: T): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ addAll(c: Collection&lt;? extends T&gt;): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ clear()</TD></TR>
<TR><TD ALIGN="LEFT" >+ contains(o: Object): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ containsAll(c: Collection&lt;?&gt;): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ element(): T</TD></TR>
<TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;T&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ offer(t: T): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ peek(): T</TD></TR>
<TR><TD ALIGN="LEFT" >+ poll(): T</TD></TR>
<TR><TD ALIGN="LEFT" >+ pop(): T</TD></TR>
<TR><TD ALIGN="LEFT" >+ remove(o: Object): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ remove(index: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ remove(): T</TD></TR>
<TR><TD ALIGN="LEFT" >+ removeAll(c: Collection&lt;?&gt;): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ retainAll(c: Collection&lt;?&gt;): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ size(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ toArray(): Object[]</TD></TR>
<TR><TD ALIGN="LEFT" >+ toArray(a: T1[]): T1[]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SaveObject681539803[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SaveObject</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- Next(eventReader: XMLEventReader)</TD></TR>
<TR><TD ALIGN="LEFT" >- loadGameData(eventReader: XMLEventReader)</TD></TR>
<TR><TD ALIGN="LEFT" >- placeShip(eventReader: XMLEventReader)</TD></TR>
<TR><TD ALIGN="LEFT" >+ readXML(path: String)</TD></TR>
<TR><TD ALIGN="LEFT" >- writeGamedatatoXML(xmlDoc: XMLStreamWriter, player: Player)</TD></TR>
<TR><TD ALIGN="LEFT" >- writeShiptoXML(xmlDoc: XMLStreamWriter, ship: Ship, index: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ writeXMl(path: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Utilities681539803[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Utilities</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ angleBetween(v: Vector2, w: Vector2): float</TD></TR>
<TR><TD ALIGN="LEFT" >+ angleToVector(out: Vector2, angle: float): Vector2</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkProximity(a: Vector2, b: Vector2, radius: float): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ contains(array: ArrayList&lt;T&gt;, a: T): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ distanceToTiles(dist: float): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ distanceToTiles(dist: Vector2): Vector2</TD></TR>
<TR><TD ALIGN="LEFT" >+ floor(a: Vector2): Vector2</TD></TR>
<TR><TD ALIGN="LEFT" >+ print(v: String, eol: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ print(v: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ randomChoice(list: ArrayList&lt;T&gt;, choice: Integer): T</TD></TR>
<TR><TD ALIGN="LEFT" >+ randomPos(min: float, max: float): Vector2</TD></TR>
<TR><TD ALIGN="LEFT" >+ round(x: Vector2): Vector2</TD></TR>
<TR><TD ALIGN="LEFT" >+ scale(x: float, min0: float, max0: float, min1: float, max1: float): float</TD></TR>
<TR><TD ALIGN="LEFT" >+ scale(x: float, a: Vector2, b: Vector2): float</TD></TR>
<TR><TD ALIGN="LEFT" >+ tilesToDistance(tiles: float): float</TD></TR>
<TR><TD ALIGN="LEFT" >+ tilesToDistance(tiles: Vector2): Vector2</TD></TR>
<TR><TD ALIGN="LEFT" >+ vectorToAngle(v: Vector2): float</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
CannonBall772905440 -> Building772905440[arrowhead=none];
CannonBall772905440 -> CannonBallCollege772905440[arrowhead=none];
CannonBall772905440 -> NPCShip772905440[arrowhead=none];
CannonBall772905440 -> Ship772905440[arrowhead=none];
CannonBall772905440 -> Weather772905440[arrowhead=none];
Component1341037606 -> Pirate1341037606[arrowhead=none, arrowtail=empty, dir=both];
Entity772905440 -> CannonBall772905440[arrowhead=none, arrowtail=empty, dir=both];
Entity772905440 -> Ship772905440[arrowhead=none, arrowtail=empty, dir=both];
EntityManager415630198 -> Component1341037606[label="cleanUp() -> cleanUp()"];
EntityManager415630198 -> RenderingManager415630198[label="raiseEvents() -> render()"];
GameScreen2089564036 -> EndScreen2089564036[label="update() -> win()"];
GameScreen2089564036 -> Pirate1341037606[label="update() -> addPoints()"];
GameScreen2089564036 -> RenderingManager415630198[label="dispose() -> cleanUp()"];
Page2089564036 -> Constants681539803[label="resize() -> UPDATE_VIEWPORT()"];
Page2089564036 -> EndScreen2089564036[arrowhead=none, arrowtail=empty, dir=both];
Page2089564036 -> GameScreen2089564036[arrowhead=none, arrowtail=empty, dir=both];
Page2089564036 -> MenuScreen2089564036[arrowhead=none, arrowtail=empty, dir=both];
Page2089564036 -> PirateGame670316286[label="parent
[0..1]"];
Page2089564036 -> PowerupScreen2089564036[arrowhead=none, arrowtail=empty, dir=both];
Page2089564036 -> QuitConfirmationScreen2089564036[arrowhead=none, arrowtail=empty, dir=both];
Page2089564036 -> ShopScreen2089564036[arrowhead=none, arrowtail=empty, dir=both];
Pirate1341037606 -> QueueFIFO681539803[label="targets
[0..*]"];
Pirate1341037606 -> Ship772905440[label="targets
[0..*]"];
PirateGame670316286 -> EndScreen2089564036[label="end
[0..1]"];
PirateGame670316286 -> GameScreen2089564036[label="game
[0..1]"];
PirateGame670316286 -> MenuScreen2089564036[label="menu
[0..1]"];
PirateGame670316286 -> PowerupScreen2089564036[label="powerup
[0..1]"];
PirateGame670316286 -> QuitConfirmationScreen2089564036[label="quitConfirm
[0..1]"];
PirateGame670316286 -> ShopScreen2089564036[label="shop
[0..1]"];
Player772905440 -> Entity772905440[label="cleanUp() -> cleanUp()"];
QuestManager415630198 -> Quest1621435617[label="checkCompleted() -> checkCompleted()"];
QuestManager415630198 -> Ship772905440[label="checkCompleted() -> plunder()"];
QuitConfirmationScreen2089564036 -> DifficultyManager415630198[label="showSaveMenu() -> SelectEasy()"];
QuitConfirmationScreen2089564036 -> Player772905440[label="showSaveMenu() -> updateHealth()"];
RenderingManager415630198 -> Component1341037606[label="render() -> render()"];
Ship772905440 -> CannonBall772905440[label="EnterTrigger() -> kill()"];
Ship772905440 -> CannonBallCollege772905440[label="EnterTrigger() -> kill()"];
Ship772905440 -> NPCShip772905440[arrowhead=none, arrowtail=empty, dir=both];
Ship772905440 -> Player772905440[arrowhead=none, arrowtail=empty, dir=both];
    
}
@enduml